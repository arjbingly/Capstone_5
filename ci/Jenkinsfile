pipeline {
    agent any

    options{
        skipDefaultCheckout(true)
    }
    environment {
        PYTHONPATH = "${env.WORKSPACE}/.venv"
        }


    stages {

        stage('Checkout') {
            steps {
//                 checkout scmGit(
//                     branches: [[name: 'tests']],
//                     extensions: [],
//                     userRemoteConfigs: [[url: 'https://github.com/arjbingly/Capstone_5.git']]
//                     )
//                     cleanWs()
                    checkout scm
            }
        }

        stage('Create venv'){
            steps {
                sh 'python3 -m venv .venv'
//                 withPythonEnv(PYTHONPATH){
//                     sh 'source .venv/bin/activate'
//                     sh 'python3 -m pip install pip --upgrade'
//                     sh 'pip install pyopenssl --upgrade'
//                     sh 'pip install pdf2image'
//                     sh 'pip install pillow-heif'
                }
            }

        }

        stage('Install dependencies'){
            steps {
//                 sh 'source .venv/bin/activate'
                withPythonEnv(PYTHONPATH){
                    sh "pip install -e ."
                }
            }

        }

        stage('Config'){
            steps{
//                 sh 'source .venv/bin/activate'
//                 sh 'pwd'
                withPythonEnv('Python3'){
                    sh 'python3 ci/modify_config_test.py'
                    sh 'python3 ci/modify_config.py'
                }
            }
        }

        stage('Linting'){
            steps {
//                 sh 'source .venv/bin/activate'
                withPythonEnv('Python3'){
                    sh 'pip install ruff'
                }
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                    sh '$JENKINS_HOME/.local/bin/ruff check --fix src --output-format junit -o ruff-report.xml'
                    sh '$JENKINS_HOME/.local/bin/ruff format src'
                }
            }
            post {
                always{
                    withChecks('Lint Checks'){
                         junit 'ruff-report.xml'
                     }
                }
            }
        }

        stage('Static type check'){
            steps {
                sh 'source .venv/bin/activate'
                sh 'pip install mypy'
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                    sh 'python3 -m mypy -p src.grag --junit-xml mypy-report.xml'
                }
            }
            post {
                always{
                     withChecks('Static Type Checks'){
                         junit 'mypy-report.xml'
                     }

                }
            }
        }

        stage('Tests'){
            steps{
                sh 'source .venv/bin/activate'
                sh 'pip install pytest'
                sh '$JENKINS_HOME/.local/bin/pytest src --junitxml=pytest-report.xml'
            }
            post {
                always{
                     withChecks('Integration Tests'){
                        junit 'pytest-report.xml'
                     }

                     cleanWs(
                        cleanWhenNotBuilt: false,
                        deleteDirs: true,
                        disableDeferredWipeout: true,
                        notFailBuild: true,
                        patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                                   [pattern: '.propsfile', type: 'EXCLUDE']]
                             )
                }
            }
        }

    }
}
