pipeline {
    agent any

    options{
        skipDefaultCheckout(true)
    }
    environment {
        PYTHONPATH = "${env.WORKSPACE}/.venv/bin"
        AUTH_TOKEN = credentials('hf_token')
        CUDACXX = '/usr/local/cuda-12/bin/nvcc'
        CMAKE_ARGS = "-DLLAMA_CUDA=on"
        }


    stages {

        stage('Checkout') {
            steps {
//                     cleanWs()
                    checkout scm
            }
        }

        stage('Create venv'){
            steps {
                sh 'python3 -m venv .venv'
            }
        }

        stage('Install dependencies'){
            steps {
                withPythonEnv(PYTHONPATH){
                    sh 'pip install -e .'
//                     sh 'CMAKE_ARGS="-DLLAMA_CUDA=on" pip install llama-cpp-python --upgrade --force-reinstall --no-cache-dir'
                }
            }

        }

        stage('Config'){
            steps{
                withPythonEnv(PYTHONPATH){
                    sh 'cp $JENKINS_HOME/hf_token'
                    sh 'python3 ci/modify_config.py'
                    sh 'rm -rf $JENKINS_HOME/ci_test_data/data/vectordb/ci_test'
                    sh 'cp -r $JENKINS_HOME/ci_test_data/data/backup_vectordb/ci_test $JENKINS_HOME/ci_test_data/data/vectordb'
                }
            }
        }

        stage('Linting'){
            steps {
                withPythonEnv(PYTHONPATH){
                    sh 'pip install ruff'
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                        sh 'ruff check . --exclude .pyenv-var-lib-jenkins-workspace-capstone_5-.venv-bin --output-format junit -o ruff-report.xml'
                        sh 'ruff format .'
                    }
                }
            }
            post {
                always{
                    withChecks('Lint Checks'){
                         junit 'ruff-report.xml'
                     }
                }
            }
        }

        stage('Static type check'){
            steps {
                withPythonEnv(PYTHONPATH){
                    sh 'pip install mypy'
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                        sh 'python3 -m mypy -p src.grag --junit-xml mypy-report.xml'
                    }
                }
            }
            post {
                always{
                     withChecks('Static Type Checks'){
                         junit 'mypy-report.xml'
                     }

                }
            }
        }

        stage('Tests'){
            steps{
                sh 'docker pull chromadb/chroma'
                sh 'docker run -d --name jenkins-chroma -p 8000:8000 chromadb/chroma'
                withPythonEnv(PYTHONPATH){
                    sh 'pip install pytest'
                    sh 'python3 ci/unlock_deeplake.py'
                    sh 'pytest src -vvv --junitxml=pytest-report.xml'
                }
            }
            post {
                always{
                     withChecks('Integration Tests'){
                        junit 'pytest-report.xml'
                     }
//                     sh 'rm -rf $JENKINS_HOME/ci_test_data/data/vectordb/test_retriever'
//                     sh 'rm -rf $JENKINS_HOME/ci_test_data/data/vectordb/test_client'
                    sh 'docker stop jenkins-chroma'
                    sh 'docker rm jenkins-chroma'

//                      cleanWs(
//                         cleanWhenNotBuilt: false,
//                         deleteDirs: true,
//                         disableDeferredWipeout: true,
//                         notFailBuild: true,
//                         patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
//                                    [pattern: '.propsfile', type: 'EXCLUDE']]
//                              )
                }
            }
        }

    }
}
